# -*- coding: utf-8 -*-
"""quiz1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ejghs_i1w7QFRI4X7geoiqrAR76RCcXn
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""
# Recognizing hand-written digits

This example shows how scikit-learn can be used to recognize images of
hand-written digits, from 0-9.
"""

print(__doc__)

import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

from skimage import transform
import numpy as np

digits = datasets.load_digits()
imageSizes = [16,32,64]
for newSize in imageSizes:
  print("==============================================")
  print(f"Dispalying below for image size of {newSize}")
  new_features = np.array(list
                        (map
                         (lambda img: transform.resize(
                                        img.reshape(8,8),#old shape
                                          (newSize, newSize), #new shape
                                          mode='constant',
                                         #flatten the resized image
                                          preserve_range=True).ravel(),
             digits.images)))
  digits.images = new_features
  n_samples = len(digits.images)
  data = digits.images.reshape((n_samples, -1))
  clf = svm.SVC(gamma=0.001)

  # different train-test set
  testSize = [0.5,0.8,0.9]
  for i in testSize:
    print("*********************************************")
    print(f'Displaying test size set of {i}')
    X_train, X_test, y_train, y_test = train_test_split(
        data, digits.target, test_size=0.5, shuffle=False)
    clf.fit(X_train, y_train)
    predicted = clf.predict(X_test)

    print(f"Classification report for classifier {clf}:\n"
        f"{metrics.classification_report(y_test, predicted)}\n")
  digits = datasets.load_digits()